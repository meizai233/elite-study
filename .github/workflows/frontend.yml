# This workflow will do a clean installation of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-nodejs

name: frontend-20240906

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

jobs:
  build:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [16.x, 18.x]
        # See supported Node.js release schedule at https://nodejs.org/en/about/releases/

    steps:
      - uses: actions/checkout@v4
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: "npm"
      - uses: actions/cache@v2
        id: cache
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install Dependencies
        run: npm install --force

      - name: Build
        run: npm run build --if-present

      - name: deploy file to server
        uses: easingthemes/ssh-deploy@v2.0.7
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          ARGS: "-avz --delete"
          SOURCE: ".output/"
          REMOTE_HOST: ${{ secrets.SERVER_IP }}
          REMOTE_USER: ${{ secrets.REMOTE_USER }}
          TARGET: ${{ secrets.REMOTE_TARGET }}

      # - name: Clean up previous Docker containers
      #   run: |
      #     docker stop frontend-course || true
      #     docker stop frontend-course-nginx || true
      #     docker rm frontend-course || true
      #     docker rm frontend-course-nginx || true
      #     docker rmi frontend-course-image || true
      #     docker rmi frontend-course-nginx-image || true

      # - name: Build Docker Image
      #   run: bash docker/build-docker-image-frontend.sh

      # short_commit=$(git rev-parse --short HEAD)
      # pipeline_id="${GITHUB_RUN_ID:-0}"
      # tag="v${pipeline_id}-${short_commit}"
      # 记得打镜像

      # nginx记得build
      # docker build -f docker/frontend.nginx.Dockerfile . -t frontend-course-nginx-image

      - name: Build Docker images
        run: |
          docker build -f docker/frontend.build.Dockerfile . -t frontend-course-image

      #  - name: Get frontend-course-image ID
      #   id: get-frontend-image-id
      #   run: |
      #     IMAGE_ID=$(docker images --format "{{.ID}}" frontend-course-image)
      #     echo "::set-output name=image_id::$IMAGE_ID"

      # - name: Get frontend-course-nginx-image ID
      #   id: get-nginx-image-id
      #   run: |
      #     IMAGE_ID=$(docker images --format "{{.ID}}" frontend-course-nginx-image)
      #     echo "::set-output name=image_id::$IMAGE_ID"

      - name: Login to Aliyun Container Registry (ACR)
        uses: aliyun/acr-login@v1
        with:
          login-server: https://registry.cn-hangzhou.aliyuncs.com
          region-id: cn-hangzhou
          username: "${{ secrets.ACR_USERNAME }}"
          password: "${{ secrets.ACR_PASSWORD }}"

      # 待办 这里镜像号码是可以变的
      # - name: Push Docker Image
      #   run: |
      #     docker tag frontend-course-image:latest registry.cn-hangzhou.aliyuncs.com/elite_study/frontend:v1.0
      #     docker push registry.cn-hangzhou.aliyuncs.com/elite_study/frontend:v1.0

      - name: Tag and push frontend-course-image to Aliyun Container Registry
        run: |
          docker tag frontend-course-image:latest registry.cn-hangzhou.aliyuncs.com/elite_study/frontend:v1.0
          docker push registry.cn-hangzhou.aliyuncs.com/elite_study/frontend:frontend-course-image:v1.0

      # - name: Tag and push frontend-course-nginx-image to Aliyun Container Registry
      #   run: |
      #     docker tag frontend-course-nginx-image:latest registry.cn-hangzhou.aliyuncs.com/elite_study/frontend:frontend-course-nginx-image:latest
      #     docker push registry.cn-hangzhou.aliyuncs.com/elite_study/frontend:frontend-course-nginx-image:latest

      # - name: Start Docker containers
      #   run: docker-compose -f docker/docker-compose.frontend.yml up -d
