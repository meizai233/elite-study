# This workflow will do a clean installation of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-nodejs

name: frontend-20240906

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

jobs:
  build:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [16.x, 18.x]
        # See supported Node.js release schedule at https://nodejs.org/en/about/releases/

    steps:
      - uses: actions/checkout@v4
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: "npm"
      - uses: actions/cache@v2
        id: cache
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Print Dockerfile path
        run: |
          echo "Dockerfile path is: $REMOTE_PARENT_TARGET/frontend.build.Dockerfile"

      - name: Build Docker images
        run: |
          pwd

          docker build -f $REMOTE_PARENT_TARGET/frontend.build.Dockerfile . -t frontend-course-image
          docker build -f $REMOTE_PARENT_TARGET/frontend.nginx.Dockerfile . -t frontend-course-nginx-image

      - name: Install Dependencies
        run: npm install --force

      - name: Build
        run: npm run build --if-present

      - name: deploy file to server
        uses: easingthemes/ssh-deploy@v2.0.7
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          ARGS: "-avz --delete"
          SOURCE: ".output/"
          REMOTE_HOST: ${{ secrets.SERVER_IP }}
          REMOTE_USER: ${{ secrets.REMOTE_USER }}
          TARGET: ${{ secrets.REMOTE_TARGET }}

      - name: Clean up previous Docker containers
        run: |
          docker stop frontend-course || true
          docker stop frontend-course-nginx || true
          docker rm frontend-course || true
          docker rm frontend-course-nginx || true
          docker rmi frontend-course-image || true
          docker rmi frontend-course-nginx-image || true

      - name: Print Dockerfile path
        run: |
          echo "Dockerfile path is: $REMOTE_PARENT_TARGET/frontend.build.Dockerfile"

      - name: Build Docker images
        run: |
          pwd

          docker build -f $REMOTE_PARENT_TARGET/frontend.build.Dockerfile . -t frontend-course-image
          docker build -f $REMOTE_PARENT_TARGET/frontend.nginx.Dockerfile . -t frontend-course-nginx-image

      - name: Start Docker containers
        run: docker-compose -f $REMOTE_PARENT_TARGET/docker-compose.frontend.yml up -d

        ## 感觉要先把配置放到服务器中 看看课程在哪里放的 以及问题是放在哪里
